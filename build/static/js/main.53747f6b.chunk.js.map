{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","features/appSlice.js","firebase.js","Preview.js","Chat.js","Chats.js","Login.js","Chatview.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstraints","height","width","facingMode","WebcamCapture","WebcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","onClick","fontSize","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","app","selectselectedImage","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","provider","GoogleAuthProvider","Preview","CameraImage","useSelector","useEffect","replace","console","log","id","uuid","putString","on","error","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","profilePic","timestamp","FieldValue","serverTimestamp","src","alt","Chat","doc","set","merge","Avatar","date","Date","toDate","toUTCString","Chats","useState","posts","setposts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","placeholder","type","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","catch","alert","message","Chatview","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","App","onAuthStateChanged","authUser","exact","path","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53747f6b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cameraSlice = createSlice({\r\n  name: 'camera',\r\n  initialState: {\r\n    cameraImage: null,\r\n  },\r\n  reducers: {\r\n    \r\n    setCameraImage: (state, action) => {\r\n      state.cameraImage = action.payload;\r\n    },\r\n\r\n    resetCameraImage: (state) => {\r\n        state.cameraImage = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCameraImage, resetCameraImage } = cameraSlice.actions;\r\n\r\nexport const selectCameraImage = (state) => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n","import React, {useRef,useCallback} from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'; \r\nimport { setCameraImage } from \"./features/cameraSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport './WebcamCapture.css';\r\nconst videoConstraints = {\r\n    height : 400,\r\n    width : 250,\r\n    facingMode : 'user',\r\n};\r\n\r\nfunction WebcamCapture() {\r\n    const WebcamRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const capture = useCallback(() => {\r\n        const imageSrc = WebcamRef.current.getScreenshot();\r\n        dispatch(setCameraImage(imageSrc));\r\n        history.push('/Preview');     \r\n    }, [WebcamRef]);\r\n\r\n    return ( <div className=\"webcamCapture\"> \r\n            <Webcam className=\"webcam\"\r\n                audio={false}\r\n                height={videoConstraints.height}\r\n                ref={WebcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={videoConstraints.width}\r\n                videoConstraints={videoConstraints}            \r\n            />\r\n\r\n            <RadioButtonUncheckedIcon\r\n                className=\"webcamCapture__button\"\r\n                onClick={capture}\r\n                fontSize=\"large\"\r\n            />\r\n          \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default WebcamCapture;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    user: null,\r\n    selectedImage:null\r\n  },\r\n  reducers: {\r\n    \r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n    selectImage: (state,action) => {\r\n      state.selectedImage = action.payload;\r\n    },\r\n    resetImage: (state) => {\r\n      state.selectedImage=null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login ,logout, selectImage,resetImage} = appSlice.actions;\r\n\r\nexport const selectUser = (state) => state.app.user;\r\nexport const selectselectedImage = (state) => state.app.selectedImage;\r\n\r\nexport default appSlice.reducer;\r\n","import firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBZLGOLtMnmdn0WfQgJVObhcW0fz09AsUo\",\r\n    authDomain: \"snapchat-clone-vp.firebaseapp.com\",\r\n    projectId: \"snapchat-clone-vp\",\r\n    storageBucket: \"snapchat-clone-vp.appspot.com\",\r\n    messagingSenderId: \"407913618175\",\r\n    appId: \"1:407913618175:web:9e4107303a1de75963caca\",\r\n    measurementId: \"G-VYW0MZXE6Z\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db  = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\nconst provider =  new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {db,auth,storage,provider};","import React, {useEffect} from 'react'\r\nimport {useSelector} from 'react-redux';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport {resetCameraImage, selectCameraImage} from \"./features/cameraSlice\";\r\nimport { selectUser } from './features/appSlice.js';\r\nimport \"./Preview.css\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport TextFieldIcon from \"@material-ui/icons/TextFields\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport NoteIcon from \"@material-ui/icons/Note\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\r\nimport TimerIcon from \"@material-ui/icons/Timer\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport { db, storage} from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Preview() {\r\n\r\n    const CameraImage = useSelector(selectCameraImage);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const user = useSelector(selectUser);\r\n\r\n    useEffect(() => {\r\n       if(!CameraImage) {\r\n            history.replace('/');\r\n       }\r\n    }, [CameraImage, history])\r\n\r\n    const closePreview = () => {\r\n        dispatch(resetCameraImage());\r\n    };\r\n\r\n    const sendpost = () => {\r\n        console.log(\"BUtton clicked\");\r\n        const id = uuid();\r\n        const uploadtask = storage.ref(`posts/${id}`).putString(CameraImage,'data_url'); \r\n        uploadtask.on('state_changed',null,\r\n        (error) =>{console.log(error)}, \r\n        () => { storage.ref('posts').child(id).getDownloadURL().then((url)  =>  {\r\n            db.collection('posts').add({\r\n                imageUrl: url,\r\n                username: user.username,\r\n                read:false,\r\n                profilePic: user.profilePic,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            });\r\n            history.replace('/chats');\r\n        });\r\n            }\r\n        );\r\n    };\r\n    \r\n    return (\r\n        <div className=\"preview\">\r\n            <CloseIcon onClick={closePreview} className=\"preview__close\"/>\r\n            <div className=\"preview__toolbarright\">\r\n                <TextFieldIcon />\r\n                <CreateIcon />\r\n                <NoteIcon />\r\n                <MusicNoteIcon />\r\n                <TimerIcon />\r\n            </div>\r\n            <div  className=\"preview__footer\">\r\n                <h2>Send to </h2>\r\n                <SendIcon onClick={sendpost} fontSize=\"small\" className=\"preview__sendIcon\" />\r\n            </div>\r\n          <img src={CameraImage} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import React from 'react';\r\nimport './Chat.css';\r\nimport { Avatar } from '@material-ui/core';\r\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\";\r\nimport ReactTimeago from 'react-timeago';\r\nimport {useDispatch} from 'react-redux';\r\nimport {selectImage} from './features/appSlice.js';\r\nimport {useHistory}  from 'react-router-dom';\r\nimport { db } from \"./firebase\";\r\n\r\nfunction Chat({id,profilePic,username,timestamp,imageUrl,read}) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const open = () => {\r\n        if(!read){\r\n            dispatch(selectImage(imageUrl));\r\n            db.collection('posts').doc(id).set({\r\n                read:true,\r\n            },\r\n               { merge:true }\r\n            );\r\n            history.push('/chats/view');\r\n        }\r\n    };\r\n    return (\r\n        <div onClick={open} className=\"chat\">\r\n            <Avatar className=\"chat_avatar\"src={profilePic}/>\r\n            <div className=\"chat_info\">\r\n                <h4>{username}</h4>\r\n                <p>{!read && 'Tap to view -'}{''} \r\n                <ReactTimeago date={new Date(timestamp?.toDate()).toUTCString()} /></p>\r\n            </div>\r\n\r\n\r\n            {!read && <StopRoundedIcon className='chat_readIcon' />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Avatar } from '@material-ui/core';\r\nimport  SearchIcon  from '@material-ui/icons/Search';\r\nimport  ChatBubbleIcon  from '@material-ui/icons/ChatBubble';\r\nimport Chat from './Chat.js';\r\nimport React,{useState,useEffect} from 'react';\r\nimport { db} from \"./firebase\";\r\nimport './Chats.css';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport { selectUser } from './features/appSlice.js';\r\nimport {auth} from './firebase';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'; \r\nimport {useHistory}  from 'react-router-dom';\r\nimport { resetCameraImage } from './features/cameraSlice.js';\r\n\r\n\r\n\r\n\r\nfunction Chats() {\r\n\r\n    const [posts,setposts] = useState([]);\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    \r\n    const takesnap = () => {\r\n        dispatch(resetCameraImage());\r\n        history.push('/');        \r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot=>\r\n            setposts(snapshot.docs.map(doc=>({\r\n            id: doc.id,\r\n            data: doc.data(),  \r\n            }))\r\n            )\r\n        ); \r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"chats\">\r\n           <div className=\"chats_header\">\r\n                <Avatar src={user.profilePic} onClick={() => auth.signOut()} className='chats_avatar' />\r\n                <div className=\"chats_search\">\r\n                    <SearchIcon className=\"chats_searchicon\"/>\r\n                    <input placeholder='Friends' type='text' />\r\n                </div>\r\n                <ChatBubbleIcon className=\"chats_chaticon\" />\r\n            </div>\r\n\r\n            <div className=\"chats_posts\">\r\n                {posts.map(({\r\n                    id,\r\n                    data: { profilePic,username,timestamp,imageUrl,read },\r\n                })  => (\r\n                    <Chat \r\n                        key={id}\r\n                        id={id}\r\n                        username={username}\r\n                        timestamp={timestamp}\r\n                        imageUrl={imageUrl}\r\n                        read={read}\r\n                        profilePic={profilePic}\r\n                    />\r\n                ))}\r\n            </div>\r\n        \r\n        <RadioButtonUncheckedIcon\r\n            className=\"chats_takepicicon\"\r\n            onClick={takesnap}\r\n            fontSize=\"large\"\r\n         />\r\n\r\n        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chats\r\n\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './Login.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {auth,provider} from './firebase';\r\nimport { login } from './features/appSlice.js';\r\n\r\n\r\nfunction Login() {\r\n    const dispatch = useDispatch();\r\n    const signin = () => {\r\n        auth.signInWithPopup(provider)\r\n        .then(result =>{\r\n            dispatch(login({\r\n                username: result.user.displayName,\r\n                profilePic: result.user.photoURL,\r\n                id: result.user.uid,\r\n            })\r\n        ); \r\n        }).catch(error => alert(error.message));\r\n    };\r\n    return (\r\n        <div className='login'>\r\n            <div className='login_container'>\r\n                <img src='https://media.wired.com/photos/5927429aaf95806129f52116/master/w_2560%2Cc_limit/snapchat-logo-s.jpg' alt='' />\r\n                <Button \r\n                    variant='outlined'\r\n                    onClick={signin}\r\n                > SIGN IN </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React ,{useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport './Chatview.css';\r\nimport {useselector} from 'react-redux';\r\nimport {selectselectedImage} from './features/appSlice';\r\nimport {useHistory}  from 'react-router-dom';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\n\r\nfunction Chatview() {\r\n    \r\n    const  selectedImage = useSelector(selectselectedImage);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if(!selectedImage){\r\n            exit();\r\n        }\r\n    },[selectedImage])\r\n    const exit = () => {\r\n        history.replace('/chats');\r\n    }\r\n    return (\r\n        <div className='chat_view'>\r\n            <img src={selectedImage} onClick={exit} alt=''/> \r\n            <div className='chat_view_timer'>\r\n            <CountdownCircleTimer  \r\n                isPlaying\r\n                duration={10}\r\n                strokeWidth={6}\r\n                size={50}\r\n                colors={[\r\n                    ['#004777',0.33],\r\n                    ['#F7B801',0.33],\r\n                    ['#A30000',0.33],\r\n                ]}\r\n            >\r\n             {({remainingTime}) => {\r\n                 if (remainingTime === 0){\r\n                     exit(); \r\n                 }\r\n                 return remainingTime;\r\n             }}   \r\n            </CountdownCircleTimer>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chatview;","import React , {useEffect} from 'react';\r\nimport { Route } from 'react-router';\r\nimport './App.css';\r\nimport WebcamCapture from './WebcamCapture';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport Preview from \"./Preview\";\r\nimport Chats from \"./Chats\";\r\nimport Login from './Login.js';\r\nimport Chatview from './Chatview.js';\r\nimport { login,logout,selectUser } from './features/appSlice.js';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {auth} from './firebase';\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if(authUser){\r\n        dispatch(login({\r\n          username: authUser.displayName,\r\n          profilePic:authUser.photoURL,\r\n          id:authUser.uid,\r\n        }))\r\n      }else{\r\n        dispatch(logout());\r\n      }\r\n    })\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n          <Router>\r\n            {!user ? (\r\n              <Login />\r\n            ) : (\r\n              <>\r\n              <img className=\"app_logo\" src='https://media.wired.com/photos/5927429aaf95806129f52116/master/w_2560%2Cc_limit/snapchat-logo-s.jpg' alt=''/>\r\n                <div className=\"app__body\">\r\n                  <div className=\"app_bodybackground\">\r\n                    <Switch>\r\n                    <Route  exact path=\"/chats\" >\r\n                      <Chats />\r\n                      </Route>\r\n                      <Route  exact path=\"/chats/view\" >\r\n                      <Chatview />\r\n                      </Route>\r\n                      <Route  exact path=\"/\" >\r\n                      <WebcamCapture />\r\n                      </Route>\r\n                      <Route path=\"/preview\" >\r\n                      <Preview />\r\n                      </Route>\r\n                    </Switch>\r\n                  </div>\r\n              </div> \r\n            </>\r\n            )}\r\n          \r\n        </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport  appReducer from '../features/appSlice';\r\nimport  cameraReducer from '../features/cameraSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    camera: cameraReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}